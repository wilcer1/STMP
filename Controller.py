# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import database_connection as DB
from View import gui_module as gui


class LoginScreen(QMainWindow, gui.Ui_LoginScreen):
    """Inherit from the code for the ui to have all information necessary."""

    # Login Screen Controller
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()  # Call the superclass constructor
        self.setupUi(self)  # Run the code that creates the UI layout
        self.pushButton.clicked.connect(
            self.loginFunc
        )  # Call function when button is pressed
        self.pushButton_2.clicked.connect(self.registerFunc)  #

    def loginFunc(self):
        """Confirm that login is correct."""
        username = (
            self.lineEdit.text()
        )  # Get the text from the username & password lineedit
        password = self.lineEdit_2.text()  #
        # Check if password and username isnt empty, if it is, popup
        if DB.verify_login(username, password) \
                and not DB.new_customer(username):
            self.customer.budget.set_budget(DB.get_income(self.customer.email),
                                            DB.get_variable_expenses(self.customer.email),
                                            DB.get_fixed_expenses(self.customer.email))
            self.customer.budget.set_buffert(DB.get_buffert(username))
            self.displayUi = MenuScreen()
            self.hide()
            self.displayUi.show()
        elif DB.verify_login(username, password) and DB.new_customer(username):
            self.displayUi = FirstLoginScreen()
            self.hide()
            self.displayUi.show()
        else:
            self.popUp.exec_()

    def registerFunc(self):
        """Go to registerScreen."""
        self.displayUi = RegisterScreen()
        self.hide()
        self.displayUi.show()


class FirstLoginScreen(QMainWindow, gui.Ui_FirstLoginScreen):
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()  # Call the superclass constructor
        self.setupUi(self)  # Run the code that creates the UI layout
        self.saveButton.clicked.connect(self.save_change)
        self.pushButton.clicked.connect(self.go_back)

    def save_change(self):
        """Save all of the input to db and program."""
        try:
            income = abs(float(self.listOfIncomeSEK.item(1).text()))
            fixed_expenses = {
                                "rent": abs(float(self.listOfExpensesSEK.item(4).text())),
                                "subscription":  abs(float(self.listOfExpensesSEK.item(2).text())),
                                "insurance":  abs(float(self.listOfExpensesSEK.item(3).text())),
                                "others":  abs(float(self.listOfExpensesSEK.item(5).text()))
                            }
            variable_expenses = {
                                "food":   abs(float(self.listOfExpensesSEK.item(11).text())),
                                "bills":   abs(float(self.listOfExpensesSEK.item(12).text())),
                                "transportation":   abs(float(self.listOfExpensesSEK.item(13).text())),
                                "hygien":   abs(float(self.listOfExpensesSEK.item(14).text())),
                                "clothes":   abs(float(self.listOfExpensesSEK.item(15).text())),
                                "entertainment":   abs(float(self.listOfExpensesSEK.item(16).text())),
                                "others":   abs(float(self.listOfExpensesSEK.item(17).text()))
                            }
            self.customer.budget.set_budget(income, fixed_expenses, variable_expenses)
            DB.set_variable_expenses(self.customer.email, variable_expenses)
            DB.set_fixed_expenses(self.customer.email, fixed_expenses)
            DB.not_new_customer(self.customer.email)
            DB.update_income(income, self.customer.email)

            self.displayUi = MenuScreen()
            self.hide()
            self.displayUi.show()
        except Exception as e:
            print(e)
            self.popUp.exec_()

    def go_back(self):
        """Go back to previous screen."""
        self.displayUi = LoginScreen()
        DB.log_out()
        self.hide()
        self.displayUi.show()


class MenuScreen(QMainWindow, gui.Ui_MenuScreen):
    """Inherit from the code for the ui to have all information necessary."""

    # Logged in menu screen Controller
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()  # Call the superclass constructor
        self.setupUi(self)  # Run the code that creates the UI layout
        self.pushButton.clicked.connect(
            self.MakeBudget
        )  # Call function when button is pressed
        self.pushButton_5.clicked.connect(self.log_out)
        self.pushButton_2.clicked.connect(self.longtermSaving)
        self.pushButton_3.clicked.connect(self.make_buffert)
        self.pushButton_4.clicked.connect(self.eco_overview)
        self.label.setText(f"Welcome, {self.customer.first_name}")

    def MakeBudget(self):
        """Display makebudget."""
        self.displayUi = BudgetScreen()
        self.displayUi.show()

    def longtermSaving(self):
        """Switch screen."""
        self.displayUi = SavingGoal()
        self.displayUi.show()

    def eco_overview(self):
        """Switch screen."""
        self.displayUi = EcoOverviewScreen()
        self.displayUi.show()

    def make_buffert(self):
        """Switch screen."""
        self.displayUi = BuffertScreen()
        self.displayUi.show()

    def log_out(self):
        """Log out the self.customer and empty singleton."""
        DB.log_out()
        self.customer.log_out()
        self.displayUi = LoginScreen()
        self.hide()
        self.displayUi.show()


class RegisterScreen(QMainWindow, gui.Ui_RegisterScreen):
    """Inherit from the code for the ui to have all information necessary."""

    # Register user window controller
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()  # Call the superclass constructor
        self.setupUi(self)  # Run the code that creates the UI layout
        self.pushButton.clicked.connect(
            self.Register
        )  # Call function when button is pressed
        self.pushButton_2.clicked.connect(self.goBack)  #

    def Register(self):
        """Get details for register function."""
        if not self.firstname.text() or \
                not self.lastname.text() or not self.password.text():
            self.popUp.setText("Some fields empty, please fill them")
            self.popUp.exec_()
        else:
            val = (
                self.username.text(),
                self.firstname.text(),
                self.lastname.text(),
                self.password.text(),
                "Y"
                )
            if DB.register_account(val):  # Check if account is in DB
                self.popUp.setText("Registered successfully, please log in")
                self.popUp.exec_()
                self.displayUi = LoginScreen()
                self.hide()
                self.displayUi.show()
            else:
                self.popUp.setText("Whoops, something went wrong!\
                                    Please try again")
                self.popUp.exec_()  # popup error wrong username/password

    def goBack(self):
        """ Go back to login page."""
        self.displayUi = LoginScreen()
        self.hide()
        self.displayUi.show()


class BudgetScreen(QMainWindow, gui.Ui_BudgetScreen):
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()  # Call the superclass constructor
        self.setupUi(self)  # Run the code that creates the UI layout
        self.incomeItem = self.listOfIncomeSEK.item(1)
        self.incomeItem.setText(f"{self.customer.budget.income}")
        self.saveButton.clicked.connect(self.save_change)
        self.backButton.clicked.connect(self.go_back)
        self.label_4.setText(str(self.customer.budget.saving_goal))
        total_fix, total_var = self.customer.budget.get_expenses()
        self.listOfExpensesSEK.item(1).setText(total_fix)
        self.listOfExpensesSEK.item(10).setText(total_var)
        self.listOfExpensesSEK.item(20).setText(str(DB.get_buffert(
                                                    self.customer.email)))
        self.set_list_of_expenses()
        self.label_3.setText(str(self.customer.budget.income -
                                 self.customer.budget.get_total_expenses()))
        self.label_4.setText(str(DB.get_saving_goal(self.customer.email)))

    def save_change(self):
        """Save the changes entered to DB and singleton."""
        try:
            self.customer.budget.income = abs(float(self.incomeItem.text()))
            self.incomeItem.setText(f"{self.customer.budget.income}")
            fixed_expenses = {
                                "rent":  abs(float(self.listOfExpensesSEK.item(4).text())),
                                "subscription":  abs(float(self.listOfExpensesSEK.item(2).text())),
                                "insurance":  abs(float(self.listOfExpensesSEK.item(3).text())),
                                "others":  abs(float(self.listOfExpensesSEK.item(5).text()))
                            }
            variable_expenses = {
                                "food":   abs(float(self.listOfExpensesSEK.item(11).text())),
                                "bills":   abs(float(self.listOfExpensesSEK.item(12).text())),
                                "transportation":   abs(float(self.listOfExpensesSEK.item(13).text())),
                                "hygien":   abs(float(self.listOfExpensesSEK.item(14).text())),
                                "clothes":   abs(float(self.listOfExpensesSEK.item(15).text())),
                                "entertainment":   abs(float(self.listOfExpensesSEK.item(16).text())),
                                "others":   abs(float(self.listOfExpensesSEK.item(17).text()))
                            }
            self.customer.budget.set_budget(self.customer.budget.income,
                                            variable_expenses, fixed_expenses)
            # update instead of set
            DB.update_variable_expenses(self.customer.email, variable_expenses)
            DB.update_fixed_expenses(self.customer.email, fixed_expenses)
            DB.update_income(self.customer.budget.income, self.customer.email)
            total_fix, total_var = self.customer.budget.get_expenses()
            self.listOfExpensesSEK.item(1).setText(total_fix)
            self.listOfExpensesSEK.item(10).setText(total_var)
            self.customer.budget.set_buffert(abs(float(
                                                    self.listOfExpensesSEK.item(20).text()
                                                    )))
            DB.update_buffert(self.customer.email, abs(float(self.listOfExpensesSEK.item(20).text())))
            self.label_3.setText(str(self.customer.budget.income -
                                     self.customer.budget.get_total_expenses())
                                 )
        except Exception:
            self.popUp.exec_()

    def go_back(self):
        """Go back to the budget choice screen."""
        self.hide()

    def set_list_of_expenses(self):
        """Set the items in the listwidget to the budget numbers stored in DB."""
        fix_exp = DB.get_fixed_expenses(self.customer.email)
        var_exp = DB.get_variable_expenses(self.customer.email)
        self.listOfExpensesSEK.item(2).setText(str(fix_exp["subscription"]))
        self.listOfExpensesSEK.item(3).setText(str(fix_exp["insurance"]))
        self.listOfExpensesSEK.item(4).setText(str(fix_exp["rent"]))
        self.listOfExpensesSEK.item(5).setText(str(fix_exp["others"]))

        self.listOfExpensesSEK.item(11).setText(str(var_exp["food"]))
        self.listOfExpensesSEK.item(12).setText(str(var_exp["bills"]))
        self.listOfExpensesSEK.item(13).setText(str(var_exp["transportation"]))
        self.listOfExpensesSEK.item(14).setText(str(var_exp["hygien"]))
        self.listOfExpensesSEK.item(15).setText(str(var_exp["clothes"]))
        self.listOfExpensesSEK.item(16).setText(str(var_exp["entertainment"]))
        self.listOfExpensesSEK.item(17).setText(str(var_exp["others"]))


class SavingGoal(QMainWindow, gui.Ui_SavinggoalScreen):

    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.goBack)
        self.pushButton_2.clicked.connect(self.calculate)

    def goBack(self):
        """Go back to previous window."""
        self.hide()

    def calculate(self):
        """Calculate how long it will take and save input."""
        if self.lineEdit.text() and self.lineEdit_2.text():
            try:
                amount_per_month = float(self.lineEdit.text())
                saving_goal = float(self.lineEdit_2.text())
                self.customer.budget.set_saving_goal(saving_goal)
                DB.update_saving_goal(self.customer.email, saving_goal)
                if saving_goal < amount_per_month:
                    time_to_reach = 0
                else:
                    time_to_reach = saving_goal / amount_per_month
                self.textBrowser.setText(f"It will take {time_to_reach} months to reach your goal")

            except ValueError:
                self.popUp.exec_()
        else:
            self.popUp.exec_()


class BuffertScreen(QMainWindow, gui.Ui_BuffertScreen):
    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()
        self.setupUi(self)
        self.totalincome.setText(str(self.customer.budget.income))
        self.totalexpenses.setText(str(self.customer.budget.get_total_expenses()))
        self.back_button.clicked.connect(self.back)
        self.save_button.clicked.connect(self.save)

    def save(self):
        """Save the input when savebutton pressed."""
        try:
            if abs(float(self.buffert_input.text())) <= self.customer.budget.income:
                self.customer.budget.set_buffert(abs(float(self.buffert_input.text())))
                DB.update_buffert(self.customer.email, (abs(float(self.buffert_input.text()))))
                buffert_percent = (self.customer.budget.buffert /
                                   self.customer.budget.income) * 100
                self.amount_of_budget.setValue(int(buffert_percent))
            else:
                self.popUp.setText("Your buffert cant be higher than your income")
                self.popUp.exec_()
        except Exception:
            self.popUp.setText("Whoops, something went wrong")
            self.popUp.exec_()

    def back(self):
        """Go back."""
        self.hide()


class EcoOverviewScreen(QMainWindow, gui.Ui_EcoOverviewScreen):

    def __init__(self):
        """Calls superclass constructor and runs the setupUi
           Connects buttons to methods and sets up the window."""
        super().__init__()
        self.setupUi(self)
        self.listOfIncomeSEK.item(1).setText(f"{self.customer.budget.income}")
        self.pushButton.clicked.connect(self.go_back)
        total_fix, total_var = self.customer.budget.get_expenses()
        self.listOfExpensesSEK.item(1).setText(total_fix)
        self.listOfExpensesSEK.item(10).setText(total_var)
        self.savingsListSEK.item(1).setText(str(
                        DB.get_saving_goal(self.customer.email)))
        self.savingsListSEK.item(2).setText(str(
                        DB.get_buffert(self.customer.email)))
        self.set_list_of_expenses()
        self.label_3.setText(str(
            self.customer.budget.income -
            self.customer.budget.get_total_expenses()))

    def go_back(self):
        """Go back to menu."""
        self.hide()

    def set_list_of_expenses(self):
        """Set the items in the listwidget to the budget numbers stored in DB."""
        fix_exp = DB.get_fixed_expenses(self.customer.email)
        var_exp = DB.get_variable_expenses(self.customer.email)
        self.listOfExpensesSEK.item(2).setText(str(fix_exp["subscription"]))
        self.listOfExpensesSEK.item(3).setText(str(fix_exp["insurance"]))
        self.listOfExpensesSEK.item(4).setText(str(fix_exp["rent"]))
        self.listOfExpensesSEK.item(5).setText(str(fix_exp["others"]))

        self.listOfExpensesSEK.item(11).setText(str(var_exp["food"]))
        self.listOfExpensesSEK.item(12).setText(str(var_exp["bills"]))
        self.listOfExpensesSEK.item(13).setText(str(var_exp["transportation"]))
        self.listOfExpensesSEK.item(14).setText(str(var_exp["hygien"]))
        self.listOfExpensesSEK.item(15).setText(str(var_exp["clothes"]))
        self.listOfExpensesSEK.item(16).setText(str(var_exp["entertainment"]))
        self.listOfExpensesSEK.item(17).setText(str(var_exp["others"]))



if __name__ == "__main__":
    import sys
    DB = DB.database_connection()
    app = QApplication(sys.argv)
    MainWindow = LoginScreen()  # Use the login screen as the mainwindow to start

    MainWindow.show()
    sys.exit(app.exec_())
